using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Vulpine.Core.Data.Exceptions
{
    /// <summary>
    /// Several data structors allow the user to search for a paticular item in that
    /// structor. This is most usefull when the target your using and the item you
    /// want to find are similar but diffrent. However, if the method cannot find an
    /// item that matches the target, this must be handeled seperatly. This is the
    /// exception thrown when a matching item is not found, and the case isn't 
    /// handled any other way.
    /// </summary>
    /// <remarks>Last Update: 2014-01-04</remarks>
    public sealed class ItemNotFoundExcp : DataStruckExcp
    {
        /// <summary>
        /// The default message generated by a missing item exception, prior to 
        /// applying any special case formating.
        /// </summary>
        public const string MSG = "The item <{0}> was not found.";

        //refrences the target item
        private object target;

        /// <summary>
        /// Creates a new item not found exception, passing on a refrence to the
        /// target item used in the search wthich caused the exception.
        /// </summary>
        /// <param name="target">The target item</param>
        private ItemNotFoundExcp(object target)
        {
            this.target = target;
        }

        /// <summary>
        /// Generates a custom message, indicating the nature of the exception
        /// as well as the targe item. Note that the target item is tipicaly
        /// diffrent from the item being searched for. Read-Only
        /// </summary>
        public override string Message
        {
            get 
            {
                String temp = (target == null) ? "<null>" : target.ToString();
                return String.Format(MSG, temp); 
            }
        }

        /// <summary>
        /// The target item. Tippiclay this is similar to, but diffrent from
        /// the item being searched for, where "similar to" is defined by
        /// the comparison method being used. Read-Only
        /// </summary>
        public object Target
        {
            get { return target; }
        }

        /// <summary>
        /// Creates and throws an "item not found" exception, given the target
        /// item which caused the exception to be thrown.
        /// </summary>
        /// <param name="target">The target item</param>
        public static void Throw(object target)
        {
            //throws an "item not found" exception
            throw new ItemNotFoundExcp(target);
        }
    }
}
