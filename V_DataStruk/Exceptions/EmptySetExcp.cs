using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Vulpine.Core.Data.Exceptions
{
    /// <summary>
    /// When dealing with collections of items, certain opperations only make scence when
    /// there are already some items in the colleciton. For instance, it is impossable
    /// to remove an item from an empty colleciton. This is the exception thrown when
    /// a collection is expected to contain some items, but is actualy empty.
    /// </summary>
    /// <remarks>Last Update: 2014-01-03</remarks>
    public sealed class EmptySetExcp : DataStruckExcp
    {
        #region Class Definitions...

        /// <summary>
        /// The default message generated by an empty set exception, prior to 
        /// applying any special case formating.
        /// </summary>
        public const string MSG = "The current opperation is not valid for an "
            + "empty set. Please make shure the set is non-empty before preforming "
            + "the opperation.";

        /// <summary>
        /// Creates a new empty set exception. No aditional information is
        /// passed allong, because the set is already known to be empty.
        /// </summary>
        private EmptySetExcp() : base() { }

        #endregion /////////////////////////////////////////////////////////////////////

        #region Class Properties...

        /// <summary>
        /// Generates a custom message, indicating the nature of the 
        /// exception. Read-Only
        /// </summary>
        public override string Message
        {
            get { return MSG; }
        }

        #endregion /////////////////////////////////////////////////////////////////////

        #region Factory Methods...

        /// <summary>
        /// Construsts and throws an empty set exception. This method
        /// dose nothing else.
        /// </summary>
        public static void Throw()
        {
            //throws an empty set exception
            throw new EmptySetExcp();
        }

        /// <summary>
        /// Checks to see if a collection is empty, if it is it throws
        /// an empty set exception. Otherwise, nothing happens.
        /// </summary>
        /// <typeparam name="E">Element type of the set</typeparam>
        /// <param name="set">The set to check</param>
        public static void Check<E>(VCollection<E> set)
        {
            //if the set is empty, throw the exception
            if (set.Empty) throw new EmptySetExcp();
        }

        /// <summary>
        /// Checks to see if a collection is empty, if it is it throws
        /// an empty set exception. Otherwise, nothing happens.
        /// </summary>
        /// <typeparam name="E">Element type of the set</typeparam>
        /// <param name="set">The set to check</param>
        public static void Check<E>(IEnumerable<E> set)
        {
            //if the set is empty, throw the exception
            if (set.Count() < 1) throw new EmptySetExcp();
        }

        #endregion /////////////////////////////////////////////////////////////////////
    }
}
